"""feat: initialize tables

Revision ID: 286af21294e3
Revises:
Create Date: 2025-08-12 09:45:42.341602

"""

from collections.abc import Sequence
from typing import Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "286af21294e3"
down_revision: str | Sequence[str] | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "role",
        sa.Column("role_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.CheckConstraint("length(name) > 0", name="role_name_check"),
        sa.PrimaryKeyConstraint("role_id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "user",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("login", sa.String(length=255), nullable=False),
        sa.Column("email", sa.String(length=320), nullable=True),
        sa.Column("password", sa.String(length=255), nullable=False),
        sa.Column("role_id", sa.Integer(), nullable=False),
        sa.Column("is_registered", sa.Boolean(), nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.CheckConstraint("length(email) >= 3", name="user_email_check"),
        sa.CheckConstraint("length(login) > 0", name="user_login_check"),
        sa.CheckConstraint("length(password) > 0", name="user_password_check"),
        sa.ForeignKeyConstraint(
            ["role_id"], ["role.role_id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("user_id"),
        sa.UniqueConstraint("login"),
    )
    op.create_table(
        "md_user",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("first_name", sa.String(length=255), nullable=True),
        sa.Column("last_name", sa.String(length=255), nullable=True),
        sa.Column("middle_name", sa.String(length=255), nullable=True),
        sa.Column(
            "profile_picture_link", sa.String(length=255), nullable=True
        ),
        sa.Column("description", sa.TEXT(), nullable=True),
        sa.CheckConstraint(
            "length(first_name) > 0", name="md_user_first_name_check"
        ),
        sa.CheckConstraint(
            "length(last_name) > 0", name="md_user_last_name_check"
        ),
        sa.CheckConstraint(
            "length(middle_name) > 0", name="md_user_middle_name_check"
        ),
        sa.CheckConstraint(
            "length(profile_picture_link) > 0",
            name="md_user_profile_picture_link_check",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["user.user_id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("user_id"),
    )
    op.create_table(
        "refresh_token",
        sa.Column("refresh_token_id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("fingerprint", sa.String(length=255), nullable=False),
        sa.Column("ip", sa.String(length=255), nullable=True),
        sa.Column("is_blocked", sa.Boolean(), nullable=False),
        sa.Column(
            "expire_at", postgresql.TIMESTAMP(timezone=True), nullable=False
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["user.user_id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("refresh_token_id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("refresh_token")
    op.drop_table("md_user")
    op.drop_table("user")
    op.drop_table("role")
    # ### end Alembic commands ###
